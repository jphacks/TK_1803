<p id="notice"><%= notice %></p>

<p>
  <strong>Name:</strong>
  <%= @web_session.name %>
</p>

<%#= form_for(@session_player, url:{controller: 'session_players', action: 'update'}) do |form| %>

<%#= form.hidden_field(:web_session) %>
<%#= form.hidden_field(:user) %>

<div class="field">
  <lable for="session_player_instrument">Instrument</lable>
  <input type="text" id="session_player_instrument" name="session_player[instrument]">
</div>

<% if @session_player.session_video.present? %>
  <video id="myVideo" width="400" height="300" autoplay src="<%= @session_player.session_video %>"></video>
<% else %>
  <video id="myVideo" width="400" height="300" autoplay ></video>
<% end %>

<br />

<% if @web_session.session_players.present? %>
  <% @web_session.session_players.each do |session_player| %>
    <% unless session_player.id == @session_player.id %>
      <video class="recordedVideo" id="recordedVideo<%= session_player.session_video %>" width="200" height="150" src="<%= session_player.session_video %>"></video>
    <% end %>
  <% end %>
<% end %>

<script type="text/javascript">
  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || window.navigator.mozGetUserMedia;
  window.URL = window.URL || window.webkitURL;

  const video = document.getElementById('myVideo');

  let recorder = null;
  let blobUrl = null;
  let chunks = [];
  let videoBlob = null;
  function startRecording() {
    navigator.getUserMedia({video: true, audio: true},
      function(stream) { // for success case
        video.src = window.URL.createObjectURL(stream);
        recorder = new MediaRecorder(stream, {mimeType: 'video/webm'});
        recorder.ondataavailable = function(evt) {
          // 録画が終了したタイミングで呼び出される
          videoBlob = new Blob([evt.data], { type: evt.data.type });
          chunks.push(evt.data);
          blobUrl = window.URL.createObjectURL(videoBlob);
          stream.getVideoTracks()[0].stop();
          stream.getAudioTracks()[0].stop();
        };

        // 録画開始
        recorder.start();
      },
      function(err) { // for error case
        console.log(err);
      }
    );

  }

  // 録画停止
  function stopRecording() {
    recorder.stop();
  }

  // 再生
  function playRecorded() {
    video.onended = function() {
      video.pause();
    };
    video.play();
  }

  // 動画を送信
  function sendSession() {
    const formdata = new FormData();
    formdata.append('session_player[video_file]', videoBlob);
    formdata.append('session_player[user_id]', <%= @session_player.user_id %>);
    formdata.append('session_player[web_session_id]', <%= @session_player.web_session_id %>);
    formdata.append('session_player[instrument]', document.getElementById('session_player_instrument').value);
    $.ajax({
      url: '/session_players/upload.json',
      type: 'POST',
      headers: {
        'X-CSRF-Token': document.getElementsByName('csrf-token')[0].getAttribute('content'),
      },
      data: formdata,
      processData: false,
      contentType: false
    }).done((data) => {
      location.href = "<%= web_session_path(@web_session) %>";
    }).fail((data) => {
      console.log('ng');
    })
  }

  // 最初から再生
  const medium = document.getElementsByTagName("video");
  function goZero()
  {
    if(blobUrl !== null) {
      video.src = blobUrl;
    }
    for(const media of medium) {
      media.currentTime = 0; //先頭に戻す
      media.play();
    }
  }
</script>

<br/>

<Button onclick="startRecording()">
  録画
</Button>

<Button onclick="stopRecording()">
  停止
</Button>

<Button onclick="playRecorded()">
  再生
</Button>

<Button onclick="sendSession()">
  登録
</Button>
<br/>

<button onclick="goZero()">
  最初から再生
</button>

<br/>

<%= link_to 'Back', session_players_path %>
