<p id="notice"><%= notice %></p>

<p>
  <strong>Name:</strong>
  <%= @web_session.name %>
</p>

<div class="field">
  <lable for="session_player_instrument">Instrument</lable>
  <input type="text" id="session_player_instrument" name="session_player[instrument]">
</div>

<video id="myVideo" width="400" height="300" autoplay ></video>

<br />

<% if @web_session.session_players.present? %>
  <% @web_session.session_players.each_with_index do |session_player, i| %>
    <video class="recordedVideo" id="recordedVideo-<%= i %>" width="200" height="150" src="<%= url_for(session_player.session_movie) %>"></video>
  <% end %>
<% end %>

<script type="text/javascript">
  const videoDelay = [];
  <% if @web_session.session_players.present? %>
  <% @web_session.session_players.each_with_index do |session_player, i| %>
  videoDelay.push(<%= session_player.delay.present? ? session_player.delay : 0 %>);
  <% end %>
  <% end %>
  navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || window.navigator.mozGetUserMedia;
  window.URL = window.URL || window.webkitURL;

  const video = document.getElementById('myVideo');

  let recorder = null;
  let blobUrl = null;
  let videoBlob = null;

  function startRecording() {
    // 録音している音はミュートに
    video.muted = true;
    navigator.getUserMedia({video: true, audio: true},
      function(stream) { // for success case
        video.src = window.URL.createObjectURL(stream);
        recorder = new MediaRecorder(stream, {mimeType: 'video/webm'});

        // 停止ボタンを使えるように
        const button = document.getElementById('stop');
        button.removeAttribute('disabled');

        recorder.ondataavailable = function(evt) {
          // 録画が終了したタイミングで呼び出される
          videoBlob = new Blob([evt.data], { type: evt.data.type });
          blobUrl = window.URL.createObjectURL(videoBlob);
          stream.getVideoTracks()[0].stop();
          stream.getAudioTracks()[0].stop();

          // 送信ボタンを使えるように
          const button = document.getElementById('send_file');
          button.removeAttribute('disabled');
        };

        recorder.onstart = function(evt) {
          // 再生
          startRestVideos();
        };

        // 録画開始
        recorder.start();
      },
      function(err) { // for error case
        console.log(err);
      }
    );

  }

  // 動画を送信
  function sendSession() {
    const formdata = new FormData();
    formdata.append('session_player[session_movie]', videoBlob);
    formdata.append('session_player[user_id]', <%= @session_player.user_id %>);
    formdata.append('session_player[web_session_id]', <%= @session_player.web_session_id %>);
    formdata.append('session_player[instrument]', document.getElementById('session_player_instrument').value);
    formdata.append('session_player[delay]', document.getElementById('session_player_delay').value);
    $.ajax({
      url: '/session_players.json',
      type: 'POST',
      headers: {
        'X-CSRF-Token': document.getElementsByName('csrf-token')[0].getAttribute('content'),
      },
      data: formdata,
      processData: false,
      contentType: false
    }).done((data) => {
      location.href = "<%= web_session_path(@web_session) %>";
    }).fail((data) => {
      console.log('ng');
    })
  }

  // 録画停止
  function stopRecording() {
    recorder.stop();
    const medium = document.getElementsByClassName("recordedVideo");
    for(const media of medium) {
      media.pause();
    }
    const button = document.getElementById('stop');
    button.setAttribute('disabled', 'true');
  }

  // 再生
  function playRecorded() {
    video.onended = function() {
      video.pause();
    };
    video.play();
  }

  // 最初から再生
  function goZero()
  {
    const medium = document.getElementsByClassName("recordedVideo");
    if(blobUrl !== null) {
      let delay;
      if(document.getElementById('session_player_delay').value===""){
        delay = 0;
      } else {
        delay = parseFloat(document.getElementById('session_player_delay').value);
      }

      video.muted = false;
      video.src = blobUrl;
      console.log(delay);
      video.currentTime = delay;
      video.play();
    }
    for(let i=0;i<medium.length;++i) {
      medium[i].currentTime = videoDelay[i]; //先頭に戻す
      medium[i].play();
    }
  }

  // 他の動画を最初から再生
  function startRestVideos()
  {
    const medium = document.getElementsByClassName("recordedVideo");
    for(let i=0;i<medium.length;++i) {
      medium[i].currentTime = videoDelay[i]; //先頭に戻す
      medium[i].play();
    }
  }

</script>

<br/>

<Button id="rec" onclick="startRecording()">
  録画
</Button>

<Button id="stop" onclick="stopRecording()" disabled>
  停止
</Button>

delay: <input type="number" id="session_player_delay" name="session_player[delay]" step="0.01">s

<br/>

<button onclick="goZero()">
  最初から再生
</button>

<br/>
<br/>

<Button id="send_file" onclick="sendSession()" disabled>
  送信
</Button>

<br/>

<%= link_to 'Back', web_sessions_path %>
